#!/bin/bash

#############################################
# Interactive Dockerfile Generator
# Creates optimized Dockerfiles for various tech stacks
#############################################

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

show_banner() {
    clear
    echo -e "${CYAN}"
    cat << "EOF"
╔═══════════════════════════════════════════════════════╗
║                                                       ║
║         🐳 Interactive Dockerfile Generator 🐳        ║
║                                                       ║
║       Generate optimized Dockerfiles instantly        ║
║                                                       ║
╚═══════════════════════════════════════════════════════╝
EOF
    echo -e "${NC}\n"
}

show_menu() {
    echo -e "${WHITE}${BOLD}Select Application Type:${NC}\n"
    echo -e "${GREEN}1)${NC}  Node.js / JavaScript"
    echo -e "${GREEN}2)${NC}  Python / Flask / Django"
    echo -e "${GREEN}3)${NC}  Go"
    echo -e "${GREEN}4)${NC}  Java / Spring Boot"
    echo -e "${GREEN}5)${NC}  PHP / Laravel"
    echo-e "${GREEN}6)${NC}  Rust"
    echo -e "${GREEN}7)${NC}  Ruby / Rails"
    echo -e "${GREEN}8)${NC}  .NET Core"
    echo -e "${GREEN}9)${NC}  Static Site (Nginx)"
    echo -e "${GREEN}10)${NC} Custom Base Image"
    echo ""
}

# Generate Node.js Dockerfile
generate_nodejs() {
    echo -e "${CYAN}Node.js Dockerfile Configuration${NC}\n"
    
    read -p "Node version (default: 20-alpine): " node_version
    node_version=${node_version:-20-alpine}
    
    read -p "Application port (default: 3000): " app_port
    app_port=${app_port:-3000}
    
    read -p "Package manager [npm/yarn/pnpm] (default: npm): " pkg_manager
    pkg_manager=${pkg_manager:-npm}
    
    read -p "Enable multi-stage build? (y/n): " multi_stage
    
    cat > Dockerfile << EOF
# Node.js Application Dockerfile
# Generated by dockerfile-gen

FROM node:${node_version} AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
$([ "$pkg_manager" = "yarn" ] && echo "COPY yarn.lock ./")
$([ "$pkg_manager" = "pnpm" ] && echo "COPY pnpm-lock.yaml ./")

# Install dependencies
RUN $([ "$pkg_manager" = "npm" ] && echo "npm ci") \
    $([ "$pkg_manager" = "yarn" ] && echo "yarn install --frozen-lockfile") \
    $([ "$pkg_manager" = "pnpm" ] && echo "pnpm install --frozen-lockfile")

# Copy application files
COPY . .

# Build application (if needed)
# RUN $pkg_manager run build

$([ "$multi_stage" = "y" ] && cat << 'MULTI'
# Production stage
FROM node:${node_version}

WORKDIR /app

# Copy only necessary files from builder
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app .

MULTI
)

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nodejs && \
    chown -R nodejs:nodejs /app

USER nodejs

# Expose port
EXPOSE ${app_port}

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:${app_port}/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Start application
CMD ["node", "index.js"]
# Or for production: CMD ["node", "--max-old-space-size=512", "index.js"]
EOF
    
    echo -e "\n${GREEN}✓ Dockerfile generated successfully!${NC}"
    echo -e "${YELLOW}Don't forget to create a .dockerignore file:${NC}"
    cat > .dockerignore << 'EOF'
node_modules
npm-debug.log
.git
.gitignore
README.md
.env
.DS_Store
coverage
.vscode
.idea
dist
build
*.log
EOF
    echo -e "${GREEN}✓ .dockerignore created${NC}"
}

# Generate Python Dockerfile
generate_python() {
    echo -e "${CYAN}Python Dockerfile Configuration${NC}\n"
    
    read -p "Python version (default: 3.11-slim): " python_version
    python_version=${python_version:-3.11-slim}
    
    read -p "Application port (default: 8000): " app_port
    app_port=${app_port:-8000}
    
    read -p "Framework [flask/django/fastapi/none] (default: none): " framework
    framework=${framework:-none}
    
    cat > Dockerfile << EOF
# Python Application Dockerfile
# Generated by dockerfile-gen

FROM python:${python_version}

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first (for caching)
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy application files
COPY . .

# Create non-root user
RUN useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app

USER appuser

# Expose port
EXPOSE ${app_port}

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:${app_port}/health || exit 1

# Start application
$([ "$framework" = "flask" ] && echo 'CMD ["python", "-m", "flask", "run", "--host=0.0.0.0", "--port='${app_port}'"]')
$([ "$framework" = "django" ] && echo 'CMD ["python", "manage.py", "runserver", "0.0.0.0:'${app_port}'"]')
$([ "$framework" = "fastapi" ] && echo 'CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "'${app_port}'"]')
$([ "$framework" = "none" ] && echo 'CMD ["python", "app.py"]')
EOF
    
    echo -e "\n${GREEN}✓ Dockerfile generated successfully!${NC}"
    cat > .dockerignore << 'EOF'
__pycache__
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.venv/
.git
.gitignore
README.md
.env
.DS_Store
*.log
.pytest_cache
.coverage
htmlcov/
EOF
    echo -e "${GREEN}✓ .dockerignore created${NC}"
}

# Generate Go Dockerfile
generate_go() {
    echo -e "${CYAN}Go Dockerfile Configuration${NC}\n"
    
    read -p "Go version (default: 1.22-alpine): " go_version
    go_version=${go_version:-1.22-alpine}
    
    read -p "Application port (default: 8080): " app_port
    app_port=${app_port:-8080}
    
    read -p "Binary name (default: app): " binary_name
    binary_name=${binary_name:-app}
    
    cat > Dockerfile << EOF
# Go Application Dockerfile (Multi-stage)
# Generated by dockerfile-gen

# Build stage
FROM golang:${go_version} AS builder

WORKDIR /build

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build binary
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo \
    -ldflags="-w -s" \
    -o ${binary_name} .

# Runtime stage
FROM alpine:latest

# Install ca-certificates for HTTPS
RUN apk --no-cache add ca-certificates

WORKDIR /app

# Copy binary from builder
COPY --from=builder /build/${binary_name} .

# Create non-root user
RUN addgroup -g 1000 appuser && \
    adduser -D -u 1000 -G appuser appuser && \
    chown -R appuser:appuser /app

USER appuser

# Expose port
EXPOSE ${app_port}

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:${app_port}/health || exit 1

# Run application
CMD ["./${binary_name}"]
EOF
    
    echo -e "\n${GREEN}✓ Dockerfile generated successfully!${NC}"
    cat > .dockerignore << 'EOF'
.git
.gitignore
README.md
*.md
.env
.DS_Store
*.log
vendor/
bin/
EOF
    echo -e "${GREEN}✓ .dockerignore created${NC}"
}

# Generate Static Site Dockerfile
generate_static() {
    echo -e "${CYAN}Static Site Dockerfile Configuration${NC}\n"
    
    read -p "Build command (e.g., npm run build): " build_cmd
    read -p "Build output directory (default: dist): " build_dir
    build_dir=${build_dir:-dist}
    
    read -p "Port (default: 80): " port
    port=${port:-80}
    
    cat > Dockerfile << EOF
# Static Site Dockerfile (Multi-stage with Nginx)
# Generated by dockerfile-gen

# Build stage
FROM node:20-alpine AS builder

WORKDIR /build

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy source
COPY . .

# Build application
RUN ${build_cmd}

# Production stage
FROM nginx:alpine

# Copy custom nginx config (optional)
# COPY nginx.conf /etc/nginx/nginx.conf

# Copy built assets from builder
COPY --from=builder /build/${build_dir} /usr/share/nginx/html

# Expose port
EXPOSE ${port}

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:${port}/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
EOF
    
    echo -e "\n${GREEN}✓ Dockerfile generated successfully!${NC}"
    
    # Generate nginx.conf
    cat > nginx.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/json;
}
EOF
    echo -e "${GREEN}✓ nginx.conf created${NC}"
}

# Main execution
main() {
    show_banner
    show_menu
    
    read -p "Enter your choice [1-10]: " choice
    
    case $choice in
        1)
            generate_nodejs
            ;;
        2)
            generate_python
            ;;
        3)
            generate_go
            ;;
        9)
            generate_static
            ;;
        *)
            echo -e "${RED}Option not yet implemented or invalid choice${NC}"
            exit 1
            ;;
    esac
    
    echo -e "\n${CYAN}${BOLD}Next Steps:${NC}"
    echo "1. Review the generated Dockerfile"
    echo "2. Build: docker build -t myapp ."
    echo "3. Run: docker run -p <port>:<port> myapp"
    echo -e "\n${YELLOW}Tip: Use 'docker-compose-gen' to generate a docker-compose.yml${NC}\n"
}

main
